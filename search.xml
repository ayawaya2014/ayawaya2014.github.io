<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Path Planning based on Artificial Potential Field Method Code Published]]></title>
    <url>%2F2018%2F03%2F05%2FPath-Planning-based-on-Artificial-Potential-Field-Method-Code-Published%2F</url>
    <content type="text"><![CDATA[Code of Path Planning based on Artificial Potential Field Method is Published on Github MATLAB Code of Artificial Potencial Field Method for Robot Path Planning Authors: Xin Li, Daqi Zhu Email: lixin850224@163.com; zdq367@aliyun.com Laboratory of Underwater Vehicles and Intelligent Systems Shanghai Maritime University]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>Programming</tag>
        <tag>Robotics</tag>
        <tag>AUV</tag>
        <tag>APF</tag>
        <tag>Path Planning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转载】唐诗 正月十五夜]]></title>
    <url>%2F2018%2F03%2F02%2F%E5%94%90%E8%AF%97-%E6%AD%A3%E6%9C%88%E5%8D%81%E4%BA%94%E5%A4%9C%2F</url>
    <content type="text"><![CDATA[正月十五夜唐.苏道味 火树银花合，星桥铁锁开。灯树千光照，明月逐人来。游妓皆穠李，行歌尽落梅。金吾不禁夜，玉漏莫相催。]]></content>
      <categories>
        <category>文学</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动机器人D*Lite路径规划算法设计、仿真及源码]]></title>
    <url>%2F2018%2F03%2F01%2F%E7%A7%BB%E5%8A%A8%E6%9C%BA%E5%99%A8%E4%BA%BAD-Lite%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E3%80%81%E4%BB%BF%E7%9C%9F%E5%8F%8A%E6%BA%90%E7%A0%81%2F</url>
    <content type="text"><![CDATA[原文地址 Dstar Lite路径规划算法简介D*Lite算法是Koenig S和Likhachev M基于LPA*算法基础上提出的路径规划算法。 LPA*算法本是基于Dijkstra最短路径算法而产生的定起点、定目标点的路径规划算法。 通过对LPA*算法的改造，使LPA*算法的思想能应用到诸如车辆动态导航这样的问题。 LPA*算法区别于其他算法 的一个重要特点是rhs()的定义：$$rhs(s) = \left\lbrace \begin{array}{ll}0 &amp; \text{if} \; s = s_{start} \\\text{min}_{s^{‘} \in Pred(s)}(g(s^{‘})+c(s^{‘},s)) &amp; \text{otherwise}\end{array} \right.$$D*Lite算法继承了rhs()的概念，但D*Lite算法是从目标节点向起始节点搜索。 为了让节点v的启发函数值随着起点位置变化而变化， Koenig S和Likhachev M给出了两种方法：一是，根据新的起点位置，将优先队列中所有节点的启发函数值重新计算；二是，并不重新计算队列中的启发函数值，而是在计算新添加到优先队列中的节点的启发函数值时，加上一个修饰符 ,表示机器人移动距离的叠加。 D* Lite Pseudo Code: CaculateKey(s) return [min(g(s),rhs(s))+h(sstart , s)+km; min(g(s),rhs(s))]; Initialize() U: =0;km =0;for all s $\in$ S, rhs(s) = g(s) = $\infty$;rhs(sgoal) = 0;U.Insert(sgoal), CaculateKey(sgoal)); UpdateVertex$(\mu)$ if $(\mu \neq s_{goal})$, rhs$(\mu)$ = $\text{min}_{s^{‘} \in Succ(\mu)}(c(\mu,s^{‘})+g(s^{‘}))$;if $(\mu \in U)$, U.Remove$(\mu)$if $(g(\mu) \neq rhs(\mu))$, U.Insert$(\mu, CaculateKey(\mu))$; ComputeShortestPath()while (U.TopKey() &lt; CaculateKey($S_{start}$) or $rhs(s_{start}) \neq g(s_{start})$) $k_{old} $ = U.TopKey();$\mu$ = U.Pop();if ($k_{old}$ &lt; CaculateKey($\mu$)) U.Insert($\mu$, CaculateKey($\mu$)); elseif ($g(\mu) &gt; rhs(\mu)$) $g(\mu) = rhs(\mu)$for all $s \in Pred(\mu)$, UpdateVertex(s); else $g(\mu) = \infty$;for all $s \in Pred(\mu) \cup {\mu}$, UpdateVertex(s); Main() $ S_{last} = S_{start} $;Initialize();ComputeShortestPath();while($ S_{start} \neq S_{goal} $) / if ($ g(S_{start} =\infty) $) then there is no known path /$ S_{start} = arg \text{min}{s^{‘} \in Succ(\mu)}(c(\mu,s^{‘})+g(s^{‘})) $; Move to $ S{start} $; Scan graph for changed edge costs; if any edge costs changed $k_m = k_m + h(s_{last}, s_{start})$; $ S_{last} = S_{start} $; for all directed edges $(u, v)$ with changed edge costs Update the edge cost $c(u, v)$; Update Vertex$(u)$; Compute ShortestPath(); 更详细的算法说明，请查阅有关文献资料。 Linux系统简要说明Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。在做算法程序开发之前，应对Linux系统基本操作有一定的了解，才能方便上手，在这里向同学们推荐一款教程： 鳥哥的 Linux 私房菜 该教程内容详实全面，是Linux入门的好材料。这里用到一些Linux下的基本操作，客户端可以选择PUTTY，至少掌握： lscdtarmangccmakevimnano 命令不能一一列举。 Dstar Lite程序使用说明该程序调用一些GNU库，请在类Unix系统下编译使用。如果系统没有安装编译工具，则需要先安装 (Ubuntu)：1$ sudo apt-get install build-essential 下载源程序：Dstar.rardstar.tar.gz（若不能下载刷新一下页面） CSDN下载：Dstar.rardstar.tar.gz 下载后解压，进入解压后的目录：12$ cd dstar$ ls 然后使用make编译1$ make 完毕，运行程序:1$ ./dstar 仿真程序操作命令： [q/Q] - 退出 [r/R] - 再次规划路径 [a/A] - 切换自动规划 [c/C] - 清屏（重启） 鼠标左键 - 设置障碍物 鼠标中间 - 移动目标点 鼠标右键 - 移动起始点 程序提供的Dstar类可以单独调用，使用vim编辑器编写程序：1$ vim DstarDraw.cpp 输入以下内容：1234567891011121314151617#include "Dstar.h"int main() &#123; Dstar *dstar = new Dstar(); list&lt;state&gt; mypath; dstar-&gt;init(0,0,10,5); // set start to (0,0) and goal to (10,5) dstar-&gt;updateCell(3,4,-1); // set cell (3,4) to be non traversable dstar-&gt;updateCell(2,2,42.432); // set set (2,2) to have cost 42.432 dstar-&gt;replan(); // plan a path mypath = dstar-&gt;getPath(); // retrieve path dstar-&gt;updateStart(10,2); // move start to (10,2) dstar-&gt;replan(); // plan a path mypath = dstar-&gt;getPath(); // retrieve path dstar-&gt;updateGoal(0,1); // move goal to (0,1) dstar-&gt;replan(); // plan a path mypath = dstar-&gt;getPath(); // retrieve path return 0;&#125; 该算法还有多种改进分支，在此基础上进一步研究。]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>Robotics</tag>
        <tag>Github</tag>
        <tag>CSDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>关于本站</category>
      </categories>
      <tags>
        <tag>About</tag>
      </tags>
  </entry>
</search>
